"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n", # Added 15000 here
"\\midrule\\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\", "\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\\n",
"\\end{tabular}\\n",
"\\caption{", caption_text, "}\\n",
"\\label{", label_text, "}\\n",
"\\end{table}\\n"
)
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file (optional)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\\n",
"\\centering\\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\\n",
"\\toprule\\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{|c|}{\\textbf{Training Sample Size ($n$)}} & \\textbf{Prediction Time} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n", # Added 15000 here
"\\midrule\\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\", "\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\\n",
"\\end{tabular}\\n",
"\\caption{", caption_text, "}\\n",
"\\label{", label_text, "}\\n",
"\\end{table}\\n"
)
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file (optional)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\\n",
"\\centering\\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\\n",
"\\toprule\\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{|c|}{\\textbf{Training} & \\textbf{Prediction} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n", # Added 15000 here
"\\midrule\\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\", "\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\\n",
"\\end{tabular}\\n",
"\\caption{", caption_text, "}\\n",
"\\label{", label_text, "}\\n",
"\\end{table}\\n"
)
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file (optional)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\\n",
"\\centering\\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\\n",
"\\toprule\\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{|c|}{\\textbf{Training}} & \\textbf{Prediction} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n", # Added 15000 here
"\\midrule\\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\", "\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\\n",
"\\end{tabular}\\n",
"\\caption{", caption_text, "}\\n",
"\\label{", label_text, "}\\n",
"\\end{table}\\n"
)
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file (optional)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\\n",
"\\centering\\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\\n",
"\\toprule\\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{c|}{\\textbf{Training}} & \\multicolumn{1}{c|}{\\textbf{Prediction}} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n",
"\\midrule\\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\", "\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\\n",
"\\end{tabular}\\n",
"\\caption{", caption_text, "}\\n",
"\\label{", label_text, "}\\n",
"\\end{table}\\n"
)
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file (optional)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\n",
"\\centering\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\n",
"\\toprule\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{c|}{\\textbf{Training}} & \\multicolumn{1}{c|}{\\textbf{Prediction}} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n",
"\\midrule\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
# Ensure each row ends with a LaTeX line break (\\\\) followed by a true newline (\n)
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\n",
"\\end{tabular}\n",
"\\caption{", caption_text, "}\n",
"\\label{", label_text, "}\n",
"\\end{table}\n"
)
# Combine header, rows, and footer
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file
# Make sure the directory exists or create it
dir.create("plots_scripts/tables", recursive = TRUE, showWarnings = FALSE)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
library(readr)
library(dplyr)
library(tidyr)
exp <- "SimA"
n_train_selected <- c(100,500,1000,5000,10000,50000)
methods_selected <- NULL
df <- read.csv(file.path("data", exp, "simulation.csv")) %>%
select(method, n_train, running_time_train, running_time_pred) %>%
filter(n_train %in% n_train_selected)
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
if (!is.null(methods_selected)){
df <- df %>% filter(method %in% methods_selected)
}
train_time_agg <- df %>%
group_by(method, n_train) %>%
summarise(mean_running_time_train = mean(running_time_train, na.rm = TRUE)) %>%
pivot_wider(names_from = n_train, values_from = mean_running_time_train, names_prefix = "")
pred_time_agg <- df %>%
group_by(method) %>%
summarise(mean_running_time_pred = mean(running_time_pred, na.rm = TRUE))
combined_agg_df <- left_join(train_time_agg, pred_time_agg, by = "method")
generate_latex_table <- function(data_frame, caption_text, label_text) {
column_names <- colnames(data_frame)
time_columns <- column_names[!column_names %in% c("method", "mean_running_time_pred")]
num_train_cols <- length(time_columns)
# Format table header
header <- paste0(
"\\begin{table}[htbp]\n",
"\\centering\n",
"\\begin{tabular}{|l|", paste(rep("c", num_train_cols), collapse = "|"), "|c|}\n",
"\\toprule\n",
"\\textbf{Procedure} & \\multicolumn{", num_train_cols, "}{c|}{\\textbf{Training}} & \\multicolumn{1}{c|}{\\textbf{Prediction}} \\\\\n",
"\\cmidrule(lr){2-", num_train_cols + 1, "} \\cmidrule(lr){", num_train_cols + 2, "-", num_train_cols + 2, "}\n",
"& ", paste(time_columns, collapse = " & "), " & 15000 \\\\\n",
"\\midrule\n"
)
# Format table rows
rows <- apply(data_frame, 1, function(row) {
method <- row["method"]
train_times <- as.numeric(row[time_columns])
formatted_train_times <- paste0(sprintf("%.3f s.", train_times), collapse = " & ")
pred_time <- as.numeric(row["mean_running_time_pred"])
if (!is.na(pred_time)){
formatted_pred_time <- sprintf("%.3f s.", pred_time)
} else {
formatted_pred_time <- "N/A"
}
# Ensure each row ends with a LaTeX line break (\\\\) followed by a true newline (\n)
paste0("\\texttt{", method, "} & ", formatted_train_times, " & ", formatted_pred_time, " \\\\\n")
})
# Format table footer
footer <- paste0(
"\\bottomrule\n",
"\\end{tabular}\n",
"\\caption{", caption_text, "}\n",
"\\label{", label_text, "}\n",
"\\end{table}\n"
)
# Combine header, rows, and footer
paste0(header, paste(rows, collapse = ""), footer)
}
# Generate the LaTeX table
latex_output <- generate_latex_table(
combined_agg_df,
"Average training and prediction time of the procedures for different training sample sizes, for the experiment described in \ref{sec:methodo_SimA}.",
"tab:runtimeSimA"
)
# Print the LaTeX output
cat(latex_output)
# Save the R script to a file
# Make sure the directory exists or create it
dir.create("plots_scripts/tables", recursive = TRUE, showWarnings = FALSE)
writeLines(latex_output, "plots_scripts/tables/runtime_table.tex")
version(reliabilitydiag)
library(reliabilitydiag)
version(reliabilitydiag)
cite(reliabilitydiag)
cite(package=reliabilitydiag)
?version
package_version(reliabilitydiag())
help(package=reliabtilitydiag)
help(package=reliabilitydiag)
# Set seed for reproducibility
set.seed(123)
# Number of observations
n <- 1000
# Generate some independent covariates
x1 <- rnorm(n)
x2 <- runif(n, 0, 10)
# Generate a true binary outcome Y
# Logistic regression: P(Y=1) = 1 / (1 + exp(-(beta0 + beta1*x1 + beta2*x2)))
true_beta0 <- 0.5
true_beta1 <- 1.0
true_beta2 <- -0.7
linear_predictor <- true_beta0 + true_beta1 * x1 + true_beta2 * x2
prob_y_is_1 <- 1 / (1 + exp(-linear_predictor))
y <- rbinom(n, 1, prob_y_is_1)
# Create a data frame
data_original <- data.frame(y, x1, x2)
# --- Scenario 1: Logistic regression without the zero column ---
model_original <- glm(y ~ x1 + x2, data = data_original, family = binomial(link = "logit"))
cat("--- Original Model Summary ---\n")
print(summary(model_original))
cat("\n")
# --- Scenario 2: Logistic regression WITH a zero column ---
# Create a column full of zeros
x_zero <- rep(0, n)
data_with_zero <- data.frame(y, x1, x2, x_zero)
model_with_zero <- glm(y ~ x1 + x2 + x_zero, data = data_with_zero, family = binomial(link = "logit"))
cat("--- Model with Zero Column Summary ---\n")
print(summary(model_with_zero))
cat("\n")
# --- Comparison ---
cat("--- Comparison of Coefficients ---\n")
cat("Original Model Coefficients:\n")
print(coef(model_original))
cat("\nModel with Zero Column Coefficients:\n")
print(coef(model_with_zero))
cat("\n--- Comparison of AIC ---\n")
cat("Original Model AIC: ", AIC(model_original), "\n")
cat("Model with Zero Column AIC: ", AIC(model_with_zero), "\n")
cat("\n--- Conclusion ---\n")
cat("As you can see, the coefficients for 'x1' and 'x2' (and the intercept) are virtually identical between the two models.\n")
cat("The 'x_zero' coefficient in the second model is 'NA' (Not Available) as expected, because it's perfectly collinear with the intercept.\n")
cat("The AIC values are also identical, indicating no change in model fit.\n")
cat("Therefore, adding a column of zeros did not negatively impact the estimation of other coefficients or the model fit.\n")
