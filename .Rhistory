}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
traceback()
library(reticulate)
library(dplyr)
library(stringr)
source("methods_in_R.R")
reticulate::use_python("C:\\Users\\Chris\\Anaconda3\\envs\\logistic\\python.exe")
# Configuration
exp <- "ExpA"
training_sizes <- c(30)
test_size <- 15000
# Initialize methods list
methods_list <- list(
SAEMLogisticRegression$new(name="SAEM")
)
# Read setup data
df_set_up <- read.csv(file.path("data", exp, "set_up.csv"))
# Check if simulation file exists and create/read it
simulation_file <- file.path("data", exp, "simulation.csv")
if (file.exists(simulation_file)) {
simulations_df <- read.csv(simulation_file)
} else {
simulations_df <- data.frame(
set_up = character(),
method = character(),
n_train = numeric(),
estimated_beta = character(),
file_name = character(),
stringsAsFactors = FALSE
)
}
# Main loop
for (i in 1:nrow(df_set_up)) {
cat(sprintf("Running set up %d out of %d: %s\n", i, nrow(df_set_up), df_set_up$set_up[i]))
# Load NPZ files using reticulate
np <- import("numpy")
data <- np$load(file.path("data", exp, "original_data", paste0(df_set_up$set_up[i], ".npz")))
X_obs <- data$f[["X_obs"]]
M <- data$f[["M"]]
y <- data$f[["y"]]
y_probs <- data$f[["y_probs"]]
X_full <- data$f[["X_full"]]
# Parse true beta from setup
true_beta <- as.numeric(str_split(gsub("\\[|\\]", "", df_set_up$true_beta[i]), " ")[[1]])
# Load test data
data_test <- np$load(file.path("data", exp, "test_data", paste0(df_set_up$set_up[i], ".npz")))
X_test <- data_test$f[["X_obs"]]
M_test <- data_test$f[["M"]]
y_probs_test <- data_test$f[["y_probs"]]
y_test <- data_test$f[["y"]]
for (n_train in training_sizes) {
cat(sprintf("\tTraining size: %d\n", n_train))
# Subset training data
X_train <- X_obs[1:n_train, ]
M_train <- M[1:n_train, ]
y_train <- y[1:n_train]
for (method in methods_list) {
# Fit method
method$fit(X_train, M_train, y_train)
if (method$can_predict) {
# Generate and save predictions
y_probs_pred <- method$predict_probs(X_test, M_test)
save_name <- paste0(df_set_up$set_up[i], "_", method$name, "_", n_train)
# Save predictions using numpy
np$savez(
file.path("data", exp, "pred_data", paste0(save_name, ".npz")),
y_probs_pred = y_probs_pred
)
} else {
save_name <- NA
}
# Get estimated parameters
if (method$return_beta) {
estimated_beta <- method$return_params()
} else {
estimated_beta <- NULL
}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
traceback()
library(reticulate)
library(dplyr)
library(stringr)
source("methods_in_R.R")
reticulate::use_python("C:\\Users\\Chris\\Anaconda3\\envs\\logistic\\python.exe")
# Configuration
exp <- "ExpA"
training_sizes <- c(300)
test_size <- 15000
# Initialize methods list
methods_list <- list(
SAEMLogisticRegression$new(name="SAEM")
)
# Read setup data
df_set_up <- read.csv(file.path("data", exp, "set_up.csv"))
# Check if simulation file exists and create/read it
simulation_file <- file.path("data", exp, "simulation.csv")
if (file.exists(simulation_file)) {
simulations_df <- read.csv(simulation_file)
} else {
simulations_df <- data.frame(
set_up = character(),
method = character(),
n_train = numeric(),
estimated_beta = character(),
file_name = character(),
stringsAsFactors = FALSE
)
}
# Main loop
for (i in 1:nrow(df_set_up)) {
cat(sprintf("Running set up %d out of %d: %s\n", i, nrow(df_set_up), df_set_up$set_up[i]))
# Load NPZ files using reticulate
np <- import("numpy")
data <- np$load(file.path("data", exp, "original_data", paste0(df_set_up$set_up[i], ".npz")))
X_obs <- data$f[["X_obs"]]
M <- data$f[["M"]]
y <- data$f[["y"]]
y_probs <- data$f[["y_probs"]]
X_full <- data$f[["X_full"]]
# Parse true beta from setup
true_beta <- as.numeric(str_split(gsub("\\[|\\]", "", df_set_up$true_beta[i]), " ")[[1]])
# Load test data
data_test <- np$load(file.path("data", exp, "test_data", paste0(df_set_up$set_up[i], ".npz")))
X_test <- data_test$f[["X_obs"]]
M_test <- data_test$f[["M"]]
y_probs_test <- data_test$f[["y_probs"]]
y_test <- data_test$f[["y"]]
for (n_train in training_sizes) {
cat(sprintf("\tTraining size: %d\n", n_train))
# Subset training data
X_train <- X_obs[1:n_train, ]
M_train <- M[1:n_train, ]
y_train <- y[1:n_train]
for (method in methods_list) {
# Fit method
method$fit(X_train, M_train, y_train)
if (method$can_predict) {
# Generate and save predictions
y_probs_pred <- method$predict_probs(X_test, M_test)
save_name <- paste0(df_set_up$set_up[i], "_", method$name, "_", n_train)
# Save predictions using numpy
np$savez(
file.path("data", exp, "pred_data", paste0(save_name, ".npz")),
y_probs_pred = y_probs_pred
)
} else {
save_name <- NA
}
# Get estimated parameters
if (method$return_beta) {
estimated_beta <- method$return_params()
} else {
estimated_beta <- NULL
}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
runif(1)
alpha
warnings()
library(reticulate)
library(dplyr)
library(stringr)
source("methods_in_R.R")
reticulate::use_python("C:\\Users\\Chris\\Anaconda3\\envs\\logistic\\python.exe")
# Configuration
exp <- "ExpA"
training_sizes <- c(1000)
test_size <- 15000
# Initialize methods list
methods_list <- list(
SAEMLogisticRegression$new(name="SAEM")
)
# Read setup data
df_set_up <- read.csv(file.path("data", exp, "set_up.csv"))
# Check if simulation file exists and create/read it
simulation_file <- file.path("data", exp, "simulation.csv")
if (file.exists(simulation_file)) {
simulations_df <- read.csv(simulation_file)
} else {
simulations_df <- data.frame(
set_up = character(),
method = character(),
n_train = numeric(),
estimated_beta = character(),
file_name = character(),
stringsAsFactors = FALSE
)
}
# Main loop
for (i in 1:nrow(df_set_up)) {
cat(sprintf("Running set up %d out of %d: %s\n", i, nrow(df_set_up), df_set_up$set_up[i]))
# Load NPZ files using reticulate
np <- import("numpy")
data <- np$load(file.path("data", exp, "original_data", paste0(df_set_up$set_up[i], ".npz")))
X_obs <- data$f[["X_obs"]]
M <- data$f[["M"]]
y <- data$f[["y"]]
y_probs <- data$f[["y_probs"]]
X_full <- data$f[["X_full"]]
# Parse true beta from setup
true_beta <- as.numeric(str_split(gsub("\\[|\\]", "", df_set_up$true_beta[i]), " ")[[1]])
# Load test data
data_test <- np$load(file.path("data", exp, "test_data", paste0(df_set_up$set_up[i], ".npz")))
X_test <- data_test$f[["X_obs"]]
M_test <- data_test$f[["M"]]
y_probs_test <- data_test$f[["y_probs"]]
y_test <- data_test$f[["y"]]
for (n_train in training_sizes) {
cat(sprintf("\tTraining size: %d\n", n_train))
# Subset training data
X_train <- X_obs[1:n_train, ]
M_train <- M[1:n_train, ]
y_train <- y[1:n_train]
for (method in methods_list) {
# Fit method
method$fit(X_train, M_train, y_train)
if (method$can_predict) {
# Generate and save predictions
y_probs_pred <- method$predict_probs(X_test, M_test)
save_name <- paste0(df_set_up$set_up[i], "_", method$name, "_", n_train)
# Save predictions using numpy
np$savez(
file.path("data", exp, "pred_data", paste0(save_name, ".npz")),
y_probs_pred = y_probs_pred
)
} else {
save_name <- NA
}
# Get estimated parameters
if (method$return_beta) {
estimated_beta <- method$return_params()
} else {
estimated_beta <- NULL
}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
library(reticulate)
library(dplyr)
library(stringr)
source("methods_in_R.R")
reticulate::use_python("C:\\Users\\Chris\\Anaconda3\\envs\\logistic\\python.exe")
# Configuration
exp <- "ExpA"
training_sizes <- c(1000)
test_size <- 15000
# Initialize methods list
methods_list <- list(
SAEMLogisticRegression$new(name="SAEM"),
MICELogisticRegression$new(name="MICE.IMP", n_imputations = 1)
)
# Read setup data
df_set_up <- read.csv(file.path("data", exp, "set_up.csv"))
# Check if simulation file exists and create/read it
simulation_file <- file.path("data", exp, "simulation.csv")
if (file.exists(simulation_file)) {
simulations_df <- read.csv(simulation_file)
} else {
simulations_df <- data.frame(
set_up = character(),
method = character(),
n_train = numeric(),
estimated_beta = character(),
file_name = character(),
stringsAsFactors = FALSE
)
}
# Main loop
for (i in 1:nrow(df_set_up)) {
cat(sprintf("Running set up %d out of %d: %s\n", i, nrow(df_set_up), df_set_up$set_up[i]))
# Load NPZ files using reticulate
np <- import("numpy")
data <- np$load(file.path("data", exp, "original_data", paste0(df_set_up$set_up[i], ".npz")))
X_obs <- data$f[["X_obs"]]
M <- data$f[["M"]]
y <- data$f[["y"]]
y_probs <- data$f[["y_probs"]]
X_full <- data$f[["X_full"]]
# Parse true beta from setup
true_beta <- as.numeric(str_split(gsub("\\[|\\]", "", df_set_up$true_beta[i]), " ")[[1]])
# Load test data
data_test <- np$load(file.path("data", exp, "test_data", paste0(df_set_up$set_up[i], ".npz")))
X_test <- data_test$f[["X_obs"]]
M_test <- data_test$f[["M"]]
y_probs_test <- data_test$f[["y_probs"]]
y_test <- data_test$f[["y"]]
for (n_train in training_sizes) {
cat(sprintf("\tTraining size: %d\n", n_train))
# Subset training data
X_train <- X_obs[1:n_train, ]
M_train <- M[1:n_train, ]
y_train <- y[1:n_train]
for (method in methods_list) {
# Fit method
method$fit(X_train, M_train, y_train)
if (method$can_predict) {
# Generate and save predictions
y_probs_pred <- method$predict_probs(X_test, M_test)
save_name <- paste0(df_set_up$set_up[i], "_", method$name, "_", n_train)
# Save predictions using numpy
np$savez(
file.path("data", exp, "pred_data", paste0(save_name, ".npz")),
y_probs_pred = y_probs_pred
)
} else {
save_name <- NA
}
# Get estimated parameters
if (method$return_beta) {
estimated_beta <- method$return_params()
} else {
estimated_beta <- NULL
}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
traceback()
?predict.glm
# Initialize methods list
methods_list <- list(
MICELogisticRegression$new(name="MICE.IMP", n_imputations = 1)
)
library(reticulate)
library(dplyr)
library(stringr)
source("methods_in_R.R")
reticulate::use_python("C:\\Users\\Chris\\Anaconda3\\envs\\logistic\\python.exe")
# Configuration
exp <- "ExpA"
training_sizes <- c(1000)
test_size <- 15000
# Initialize methods list
methods_list <- list(
MICELogisticRegression$new(name="MICE.IMP", n_imputations = 1)
)
# Read setup data
df_set_up <- read.csv(file.path("data", exp, "set_up.csv"))
# Check if simulation file exists and create/read it
simulation_file <- file.path("data", exp, "simulation.csv")
if (file.exists(simulation_file)) {
simulations_df <- read.csv(simulation_file)
} else {
simulations_df <- data.frame(
set_up = character(),
method = character(),
n_train = numeric(),
estimated_beta = character(),
file_name = character(),
stringsAsFactors = FALSE
)
}
# Main loop
for (i in 1:nrow(df_set_up)) {
cat(sprintf("Running set up %d out of %d: %s\n", i, nrow(df_set_up), df_set_up$set_up[i]))
# Load NPZ files using reticulate
np <- import("numpy")
data <- np$load(file.path("data", exp, "original_data", paste0(df_set_up$set_up[i], ".npz")))
X_obs <- data$f[["X_obs"]]
M <- data$f[["M"]]
y <- data$f[["y"]]
y_probs <- data$f[["y_probs"]]
X_full <- data$f[["X_full"]]
# Parse true beta from setup
true_beta <- as.numeric(str_split(gsub("\\[|\\]", "", df_set_up$true_beta[i]), " ")[[1]])
# Load test data
data_test <- np$load(file.path("data", exp, "test_data", paste0(df_set_up$set_up[i], ".npz")))
X_test <- data_test$f[["X_obs"]]
M_test <- data_test$f[["M"]]
y_probs_test <- data_test$f[["y_probs"]]
y_test <- data_test$f[["y"]]
for (n_train in training_sizes) {
cat(sprintf("\tTraining size: %d\n", n_train))
# Subset training data
X_train <- X_obs[1:n_train, ]
M_train <- M[1:n_train, ]
y_train <- y[1:n_train]
for (method in methods_list) {
# Fit method
method$fit(X_train, M_train, y_train)
if (method$can_predict) {
# Generate and save predictions
y_probs_pred <- method$predict_probs(X_test, M_test)
save_name <- paste0(df_set_up$set_up[i], "_", method$name, "_", n_train)
# Save predictions using numpy
np$savez(
file.path("data", exp, "pred_data", paste0(save_name, ".npz")),
y_probs_pred = y_probs_pred
)
} else {
save_name <- NA
}
# Get estimated parameters
if (method$return_beta) {
estimated_beta <- method$return_params()
} else {
estimated_beta <- NULL
}
# Update simulations dataframe
new_row <- data.frame(
set_up = df_set_up$set_up[i],
method = method$name,
n_train = n_train,
estimated_beta = toString(estimated_beta),
file_name = save_name,
stringsAsFactors = FALSE
)
simulations_df <- rbind(simulations_df, new_row)
# Save updated simulations
write.csv(simulations_df, simulation_file, row.names = FALSE)
}
}
}
R --version
which R
?miss.glm
vignette(misaem)
vignette("misaem")
install.package("renv")
install.packages("renv")
library(renv)
renv::activate()
renv::snapshot()
Sys.time()
a <- Sys.time()
b <- Sys.time()
a-b
as.numeric(a-b)
a-b
(a-b)*2
as.numeric(difftime(a, b, units = "secs"))
data <- data.frame(
col1 = sample(1:100, 100, replace = TRUE),
col2 = sample(1:100, 100, replace = TRUE),
col3 = rnorm(100),
col4 = rnorm(100),
col5 = rnorm(100)
)
data
p.miss <- 0.2
M <- matrix(rbinom(100*5, 1, p.miss), 100, 5)
data[M == 1] <- NA
# impute the data
targets::tar_source()
# impute the data
targets::tar_source()
library(targets)
